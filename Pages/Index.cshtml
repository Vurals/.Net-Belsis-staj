@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<!doctype html>
<html lang="en">
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css" type="text/css">
    <meta charset="utf-8" />
    @*<meta http-equiv="X-UA-Compatible" content="IE=edge">*@
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Draw and Modify Features</title>

    <!-- Pointer events polyfill for old browsers, see https://caniuse.com/#feat=pointer -->
    @*<script src="https://unpkg.com/elm-pep"></script>*@
    <!-- jsPanel CSS -->
    <link href="https://cdn.jsdelivr.net/npm/jspanel4@4.10.2/dist/jspanel.css" rel="stylesheet">
    <!-- jsPanel JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/jspanel4@4.10.2/dist/jspanel.js"></script>

    <!-- optional jsPanel extensions -->
    <script src="https://cdn.jsdelivr.net/npm/jspanel4@4.10.2/dist/extensions/modal/jspanel.modal.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jspanel4@4.10.2/dist/extensions/tooltip/jspanel.tooltip.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jspanel4@4.10.2/dist/extensions/hint/jspanel.hint.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jspanel4@4.10.2/dist/extensions/layout/jspanel.layout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jspanel4@4.10.2/dist/extensions/contextmenu/jspanel.contextmenu.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jspanel4@4.10.2/dist/extensions/dock/jspanel.dock.js"></script>
    <style>
        .map {
            height: 700px;
            width: 100%;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js"></script>
</head>
<body>

    <h2>My Map</h2>
    <button onclick="startDrawing()">Start-End Drawing</button>
    <button onclick="SelectPoint()">Select a Point</button>
    <button onclick="EndSelection()">End selection and Delete Point</button>

    @* Layer Switcher *@
    <div class="grid-container">
        <div class="grid-1">
            <div class="sidebar">
                <h2>Base Layers</h2>
                <input type="radio" name='baseLayerRadioButton' value='OSMStandard' checked>OSM Standard<br>
                <input type="radio" name='baseLayerRadioButton' value='OSMHumanitarian' checked>OSM Humanitarian<br>
                <input type="radio" name='baseLayerRadioButton' value='StamenTerrain' checked>Stamen Terrain<br>
            </div>
        </div>

    </div>

    <div id="map" class="map"><div id="popup"></div></div>
    <form class="form-inline">
        <label for="type">Geometry type &nbsp;</label>
        <select id="type" style="display: none;">
            <option value="Point">Point</option>
            <option value="LineString">LineString</option>
            <option value="Polygon">Polygon</option>
        </select>
    </form>

    <script type="text/javascript">


        var typeSelect = document.getElementById('type');
        //start drawing button clicked function
        function startDrawing() {
            //vector.getSource().clear();

            if (typeSelect.style.display === 'none') {
                typeSelect.style.display = 'block';
                addInteractions();

            } else {
                typeSelect.style.display = 'none';
                map.removeInteraction(draw);
            }

            
        }
        //Map and vector addition
        var raster = new ol.layer.Tile({
            source: new ol.source.OSM(),
        });

        var source = new ol.source.Vector();
        ////var vector = new ol.layer.Vector({
        //    source: source,
        //    style: new ol.style.Style({
        //        fill: new ol.style.Fill({
        //            color: 'rgba(255, 255, 255, 0.2)',
        //        }),
        //        stroke: new ol.style.Stroke({
        //            color: '#ffcc33',
        //            width: 2,
        //        }),
        //        image: new ol.style.Circle({
        //            radius: 7,
        //            fill: new ol.style.Fill({
        //                color: '#ffcc33',
        //            }),
        //        }),
        //    }),
        //});

        var yer_imi = new ol.layer.Vector({
            source: new ol.source.Vector()
        })
        var slider = new ol.control.ZoomSlider();
        var element = document.getElementById('popup');

        var map = new ol.Map({
            layers: [raster, yer_imi],
            target: 'map',
            view: new ol.View({
                center: [-11000000, 4600000],
                zoom: 4,
            }),
        });
        var popup = new ol.Overlay({
            element: element,
            positioning: 'bottom-center',
            stopEvent: false,
            offset: [0, -50],
        });
        map.addOverlay(popup);
        map.addControl(slider);

        // display popup on click
        map.on('click', function (evt) {
            var feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {
                return feature;
            });
            $(element).popover('dispose');
            console.log(feature);
            if (feature) {
                var coordinates = feature.getGeometry().getCoordinates();
                var hdms = ol.coordinate.toStringHDMS(ol.proj.toLonLat(evt.coordinate))
                popup.setPosition(coordinates);
                $(element).popover({
                    placement: 'top',
                    html: true,
                    content: '<p>ID of this point is:</p><code>' + feature.getId() + '</code>' + '<p>Coordinates of this point:</p><code>' + hdms + '</code>' ,
                });
                $(element).popover('show');
            } else {
                $(element).popover('dispose');
            }
        });


        var modify = new ol.interaction.Modify({ source: source });
        map.addInteraction(modify);

        var draw, snap; // global so we can remove them later


        function addInteractions() {
            map.removeInteraction(draw);
            map.removeInteraction(snap);

            draw = new ol.interaction.Draw({
                source: source,
                type: typeSelect.value ? typeSelect.value : "Point",
            });
            map.addInteraction(draw);
            snap = new ol.interaction.Snap({ source: source });
            map.addInteraction(snap);

            draw.on('drawend', function (e) {
                var currentFeature = e.feature;
                var _coords = currentFeature.getGeometry().getCoordinates();
                var format = new ol.format.WKT();

                var wktString = format.writeFeature(e.feature);

                draw.setActive(false);

                var panel = jsPanel.create({
                    id: "draw_ekle_panel",
                    theme: 'success',
                    headerTitle: 'draw ekle',
                    position: 'center-top 0 58',
                    contentSize: '300 250',
                    content: 'No: <input id="draw_no" type="text"/><br><br><br><button style="height:40px;width:60px" id="draw_kaydet" class="btn btn-success">Ekle</button>',
                    callback: function () {
                        this.content.style.padding = '20px';
                    }
                });
                document.getElementById('draw_kaydet').onclick = function () {

                    var _no = $('#draw_no').val();

                    if (_no.length < 1) {

                        alert("draw Numarası Girmediniz");

                        return;
                    }
                    //kapının kordinatlarını x ve y değişkenlerine attım
                    var _data = {
                        x: 0,
                        y: 0,
                        DrawNo: _no,
                        wkt: wktString

                    };

                    console.log(_data);

                    $.ajax({
                        type: "POST",
                        url: "/api/Values",
                        //contentType: 'json; charset=utf-8',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        dataType: 'json',
                        data: JSON.stringify(_data),
                        success: function (message) {
                            alert("Başarıyla Eklendi");
                            ListAllPoints();
                            //draw.setActive(false);
                        },

                        error: function () {
                            alert("Hata Oluştu");
                        },
                        onbeforeclose: function () {
                            return onbeforeclose();
                        },
                    });

                    panel.close();
                    draw.setActive(true);

                };
            });
        }

        function firstInteraction() {
            draw = new ol.interaction.Draw({
                source: source,
                type: typeSelect.value,
            });
            map.addInteraction(draw);
            draw.setActive(false);
            snap = new ol.interaction.Snap({ source: source });
            map.addInteraction(snap);

        }
        //draw.setActive(false);
        /**
         * Handle change event.
         */
        typeSelect.onchange = function () {
            //draw.setActive(true);
            map.removeInteraction(draw);
            map.removeInteraction(snap);
            addInteractions();
        };

        //   firstInteraction();
        ListAllPoints();

        function ListAllPoints() {

            $.ajax({
                type: "GET",
                url: "/api/Values",
                dataType: 'json',
                success: function (response) {

                    var _features = [];

                    for (var i = 0; i < response.length; i++) {

                        //her bir pointin x,y koordinatlarını aldım.

                        var _point = response[i];
                        var _id = _point.id;
                        var format = new ol.format.WKT();
                        var featurething = format.readFeature(response[i].wkt);

                        //var featurething = new ol.Feature({
                        //    name: "Yer_imi",
                        //    id: _id,
                        //    geometry: _geo,

                        //});

                        featurething.setId(_id);
                        //console.log(featurething);
 

                        _features.push(featurething);
                    }
                    //oluşturduğum style ı feature a set ettım ve featuring nesnemi de  boş olan _features listesine attım.
                    //layer ve source olayını daha önce vurgulamıstım yazdıgım ve elde ettıgım feature harita kaynağına (source) atılmazsa
                    //dataları map üstünde göremeyiz

                    var _pointSource = yer_imi.getSource();

                    _pointSource.addFeatures(_features);
                },

                error: function () {
                    alert("upsss");
                },

            });
        };



        var highlightStyle = new ol.style.Style({
            image: new ol.style.Circle({
                fill: new ol.style.Fill({
                    color: 'rgba(0,0,255,0.3)',
                }),
                stroke: new ol.style.Stroke({
                    color: '#8000ff',
                }),
            }),
        });

        var select = null;

        select = new ol.interaction.Select({ condition: ol.events.click, });
        //var status = document.getElementById('status');
        // select interaction working on "click"


        function SelectPoint() {
            //select.setActive(true);
            map.addInteraction(select);
            //map.on('singleclick', function (e) {
            //map.forEachFeatureAtPixel( function (f) {

            //});
            //});

        }

        function EndSelection() {
            //select.setActive(false);
            var selected = select.getFeatures().item(0);
            var id = selected.getId();

            $.ajax({
                type: "DELETE",
                url: "/api/Values/" + id,

                //dataType: 'json',
                //data: JSON.stringify(_data),
                //success: function (message) {
                //    alert("Başarıyla Eklendi");

                //    draw.setActive(false);
                //},
                success: function (message) {
                    alert("Başarıyla Silindi");
                    yer_imi.getSource().removeFeature(selected);
                },
                error: function () {
                    alert("Hata Oluştu");
                },
                onbeforeclose: function () {
                    return onbeforeclose();
                },
            });
            map.removeInteraction(select);
        }

        function Delete() {
            //Get the feature that's selected
            var selectedFeature = select.getFeatures().item(0);
            //Remove it from your feature source
        }



    </script>

</body>
</html>
